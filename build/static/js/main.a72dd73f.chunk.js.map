{"version":3,"sources":["assets/logo.svg","pages/Home/index.tsx","services/api.ts","components/Dropzone/index.tsx","components/SucessScreen/index.tsx","pages/CreatePoint/index.tsx","routes.tsx","App.tsx","index.tsx"],"names":["module","exports","Home","id","className","src","logo","alt","to","api","axios","create","baseURL","process","Dropzone","onFileUploaded","useState","selectedFileUrl","setselectedFileUrl","onDrop","useCallback","acceptedFiles","file","fileUrl","URL","createObjectURL","useDropzone","accept","getRootProps","getInputProps","SuccessScreen","props","confirm","CreatePoint","items","setItems","ufs","setUfs","cities","setCities","inititalMapPosition","setInititalMapPosition","name","email","whatsapp","formData","setFormData","selectedUf","setSelectedUf","selectedItems","setSelectedItems","selectedCity","setSelectedCity","selectedMapPosition","setSelectedMapPosition","selectedFile","setSelectedFile","successScreen","setSuccessScreen","handleInputChange","event","target","value","a","preventDefault","uf","city","latitude","longitude","data","FormData","append","String","join","post","alert","useEffect","navigator","geolocation","getCurrentPosition","position","coords","get","then","response","ufInitials","map","sigla","toLowerCase","cityNames","nome","onSubmit","e","handleSubmit","htmlFor","type","onChange","Map","center","zoom","onClick","latlng","lat","lng","TileLayer","attribution","url","Marker","handleSelectUf","key","item","includes","findIndex","filteredItems","filter","handleSelectItem","image_url","title","Routes","component","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,kC,4OC4B5BC,G,MAtBQ,WACnB,OACI,yBAAKC,GAAG,aACJ,yBAAKC,UAAU,WACX,gCACI,yBAAKC,IAAKC,IAAMC,IAAI,aAExB,8BACI,wEACA,kGACA,kBAAC,IAAD,CAAMC,GAAG,6BACL,8BACI,kBAAC,IAAD,OAEJ,qE,iGCbTC,EAJHC,IAAMC,OAAO,CACrBC,QAH0BC,2B,QC4CfC,G,MApCmB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAAqB,EAGRC,mBAAS,IAHD,mBAG/CC,EAH+C,KAG9BC,EAH8B,KAKhDC,EAASC,uBAAY,SAAAC,GAEvB,IAAMC,EAAOD,EAAc,GAGrBE,EAAUC,IAAIC,gBAAgBH,GAEpCJ,EAAmBK,GACnBR,EAAeO,KAEhB,CAACP,IAfkD,EAiBdW,YAAY,CAChDP,SACAQ,OAAQ,YAFJC,EAjB8C,EAiB9CA,aAAcC,EAjBgC,EAiBhCA,cAKtB,OACI,uCAAKzB,UAAU,YAAewB,KAC1B,2CAAWC,IAAX,CAA4BF,OAAO,aAClCV,EACK,yBAAKZ,IAAKY,EAAiBV,IAAI,oBAC/B,2BACE,kBAAC,IAAD,MADF,gCCnBHuB,G,MAZO,SAACC,GAEnB,OACI,yBAAK5B,GAAG,qBAAqBC,UAAW2B,EAAMC,SAC1C,kBAAC,IAAD,CAAMxB,GAAG,gBACL,kBAAC,IAAD,MACA,0DC0RDyB,EAhQe,WAAO,IAAD,EAENjB,mBAAiB,IAFX,mBAEzBkB,EAFyB,KAElBC,EAFkB,OAGVnB,mBAAmB,IAHT,mBAGzBoB,EAHyB,KAGpBC,EAHoB,OAIJrB,mBAAmB,IAJf,mBAIzBsB,EAJyB,KAIjBC,EAJiB,OAKsBvB,mBAA2B,CAAC,EAAG,IALrD,mBAKzBwB,EALyB,KAKJC,EALI,OAOAzB,mBAAS,CACrC0B,KAAM,GACNC,MAAO,GACPC,SAAU,KAVkB,mBAOzBC,EAPyB,KAOfC,EAPe,OAaI9B,mBAAS,KAbb,mBAazB+B,EAbyB,KAabC,EAba,OAcUhC,mBAAmB,IAd7B,mBAczBiC,EAdyB,KAcVC,EAdU,OAeQlC,mBAAS,KAfjB,mBAezBmC,EAfyB,KAeXC,EAfW,OAgBsBpC,mBAA2B,CAAC,EAAG,IAhBrD,mBAgBzBqC,EAhByB,KAgBJC,EAhBI,QAiBQtC,qBAjBR,qBAiBzBuC,GAjByB,MAiBXC,GAjBW,SAmBUxC,mBAAS,KAnBnB,qBAmBzByC,GAnByB,MAmBVC,GAnBU,MAmEhC,SAASC,GAAkBC,GAAuC,IAAD,EACrCA,EAAMC,OAAtBnB,EADqD,EACrDA,KAAMoB,EAD+C,EAC/CA,MAGdhB,EAAY,2BAAKD,GAAN,kBAAiBH,EAAOoB,KAvEP,8CAwGhC,WAA4BF,GAA5B,iCAAAG,EAAA,6DAEIH,EAAMI,iBAEEpB,EAA0BC,EAA1BD,SAAUD,EAAgBE,EAAhBF,MAAOD,EAASG,EAATH,KACnBuB,EAAKlB,EACLmB,EAAOf,EANjB,cAOkCE,EAPlC,GAOWc,EAPX,KAOqBC,EAPrB,KAQUlC,EAAQe,GAERoB,EAAO,IAAIC,UAEZC,OAAO,OAAQ7B,GACpB2B,EAAKE,OAAO,WAAY3B,GACxByB,EAAKE,OAAO,QAAS5B,GACrB0B,EAAKE,OAAO,KAAMN,GAClBI,EAAKE,OAAO,OAAQL,GACpBG,EAAKE,OAAO,WAAYC,OAAOL,IAC/BE,EAAKE,OAAO,YAAaC,OAAOJ,IAChCC,EAAKE,OAAO,QAASrC,EAAMuC,KAAK,MAG5BlB,IACAc,EAAKE,OAAO,QAAShB,IAvB7B,UA0BU9C,EAAIiE,KAAK,QAASL,GA1B5B,QA4BIM,MAAM,2BAENjB,GAAiB,WA9BrB,6CAxGgC,sBAyIhC,OAnHAkB,qBAAU,WAENC,UAAUC,YAAYC,oBAAmB,SAAAC,GAAa,IAAD,EACjBA,EAASC,OAAjCd,EADyC,EACzCA,SAAUC,EAD+B,EAC/BA,UAClB3B,EAAuB,CAAC0B,EAAUC,SAEvC,IAGHQ,qBAAU,WACNnE,EAAIyE,IAAI,SAASC,MAAK,SAAAC,GAClBjD,EAASiD,EAASf,WAEvB,IAEHO,qBAAU,WACNlE,IAAMwE,IAAwB,+DACzBC,MAAK,SAAAC,GACF,IAAMC,EAAaD,EAASf,KAAKiB,KAAI,SAAArB,GAAE,OAAIA,EAAGsB,SAC9ClD,EAAOgD,QAEhB,IAGHT,qBAAU,WACa,MAAf7B,GAGJrC,IAAMwE,IAAN,sEAA+FnC,EAAWyC,cAA1G,gBACKL,MAAK,SAAAC,GACF,IAAMK,EAAYL,EAASf,KAAKiB,KAAI,SAAApB,GAAI,OAAIA,EAAKwB,QACjDnD,EAAUkD,QAEnB,CAAC1C,IAKJ6B,qBAAU,WAENlB,GAAiB,MAClB,CAACD,KA2EA,oCACI,yBAAKtD,GAAG,qBACJ,gCACI,yBAAKE,IAAKC,IAAMC,IAAI,KACpB,kBAAC,IAAD,CAAMH,UAAU,OAAOI,GAAG,gBACtB,kBAAC,IAAD,MADJ,qBAMJ,0BAAMmF,SAAU,SAAAC,GAAC,OApJG,4CAoJCC,CAAaD,KAC9B,0CAAe,6BAAf,oBAEA,kBAAC,EAAD,CAAU7E,eAAgByC,KAE1B,kCACI,gCACI,sCAGJ,yBAAKpD,UAAU,SACX,2BAAO0F,QAAQ,QAAf,oBACA,2BACIC,KAAK,OACL5F,GAAG,OACHuC,KAAK,OACLsD,SAAU,SAAAJ,GAAC,OAAIjC,GAAkBiC,OAEzC,yBAAKxF,UAAU,eACX,yBAAKA,UAAU,SACX,2BAAO0F,QAAQ,SAAf,SACA,2BACIC,KAAK,OACL5F,GAAG,QACHuC,KAAK,QACLsD,SAAU,SAAAJ,GAAC,OAAIjC,GAAkBiC,OAEzC,yBAAKxF,UAAU,SACX,2BAAO0F,QAAQ,YAAf,YACA,2BACIC,KAAK,OACL5F,GAAG,WACHuC,KAAK,WACLsD,SAAU,SAAAJ,GAAC,OAAIjC,GAAkBiC,SAIjD,kCACI,gCACI,2CACA,kEAGJ,kBAACK,EAAA,EAAD,CAAKC,OAAQ1D,EAAqB2D,KAAM,GAAIC,QA3GhE,SAAwBxC,GAEpBN,EAAuB,CACnBM,EAAMyC,OAAOC,IACb1C,EAAMyC,OAAOE,QAwGG,kBAACC,EAAA,EAAD,CACIC,YAAY,0EACZC,IAAI,uDAER,kBAACC,EAAA,EAAD,CAAQ3B,SAAU3B,KAEtB,yBAAKjD,UAAU,eACX,yBAAKA,UAAU,SACX,2BAAO0F,QAAQ,MAAf,cACA,4BACI3F,GAAG,KACHuC,KAAK,KACLoB,MAAOf,EACPiD,SAAU,SAAAJ,GAAC,OAnI3C,SAAwBhC,GACpB,IAAIK,EAAKL,EAAMC,OAAOC,MACtBd,EAAciB,GAiI6B2C,CAAehB,KAE9B,4BAAQ9B,MAAM,KAAd,sBACC1B,EAAIkD,KAAI,SAAArB,GAAE,OACP,4BAAQ4C,IAAK5C,EAAIH,MAAOG,GAAKA,QAIzC,yBAAK7D,UAAU,SACX,2BAAO0F,QAAQ,QAAf,UACA,4BACI3F,GAAG,OACHuC,KAAK,OACLoB,MAAOX,EACP6C,SA5IhC,SAA0BpC,GACtB,IAAIM,EAAON,EAAMC,OAAOC,MACxBV,EAAgBc,KA4IY,4BAAQJ,MAAM,KAAd,sBACCxB,EAAOgD,KAAI,SAAApB,GAAI,OACZ,4BAAQ2C,IAAK3C,EAAMJ,MAAOI,GAAOA,UAOrD,kCACI,gCACI,kDACA,uEAGJ,wBAAI9D,UAAU,cAEN8B,EAAMoD,KAAI,SAAAwB,GAAI,OACV,wBAAID,IAAKC,EAAK3G,GAAIC,UAAW6C,EAAc8D,SAASD,EAAK3G,IAAM,WAAa,GAAIiG,QAAS,kBAnJzH,SAA0BjG,GAGtB,GAD4B8C,EAAc+D,WAAU,SAAAF,GAAI,OAAIA,IAAS3G,MAC1C,EAAG,CAC1B,IAAM8G,EAAgBhE,EAAciE,QAAO,SAAAJ,GAAI,OAAIA,IAAS3G,KAC5D+C,EAAiB+D,QAEjB/D,EAAiB,GAAD,mBAAKD,GAAL,CAAoB9C,KA4ImFgH,CAAiBL,EAAK3G,MACjH,yBAAKE,IAAKyG,EAAKM,UAAW7G,IAAKuG,EAAKO,QACpC,8BAAOP,EAAKO,aAOhC,4BAAQtB,KAAK,UAAb,+BAGR,kBAAC,EAAD,CAAe3F,UAAWqD,OCjRvB6D,MATf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,UAAWrH,EAAMsH,KAAK,gBAAgBC,OAAK,IAClD,kBAAC,IAAD,CAAOF,UAAWtF,EAAauF,KAAK,gC,MCAjCE,MANf,WACE,OACE,kBAAC,EAAD,OCFJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.a72dd73f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.47c4581a.svg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FiLogIn } from 'react-icons/fi';\r\nimport logo from '../../assets/logo.svg';\r\nimport './styles.css';\r\n\r\nconst Home: React.FC = () => {\r\n    return (\r\n        <div id=\"page-home\">\r\n            <div className=\"content\">\r\n                <header>\r\n                    <img src={logo} alt=\"Ecoleta\" />\r\n                </header>\r\n                <main>\r\n                    <h1>Seu marketplace de coleta de resíduos</h1>\r\n                    <p>ajudamos pessoas  a encontrarem pontos de coleta de forma eficiente</p>\r\n                    <Link to=\"/Ecoleta_Web/create-point\">\r\n                        <span>\r\n                            <FiLogIn />\r\n                        </span>\r\n                        <strong>Cadastre um ponto de coleta</strong>\r\n                    </Link>\r\n                </main>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import axios from 'axios';\r\nconst { REACT_APP_API_URL } = process.env;\r\n\r\nconst api = axios.create({\r\n    baseURL: REACT_APP_API_URL\r\n})\r\n\r\nexport default api","import React, { useCallback, useState } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { FiUpload } from 'react-icons/fi';\r\nimport './styles.css';\r\n\r\ninterface Props {\r\n    onFileUploaded: (file: File) => void;\r\n}\r\n\r\nconst Dropzone: React.FC<Props> = ({ onFileUploaded }) => {\r\n\r\n    // preview da imagem\r\n    const [selectedFileUrl, setselectedFileUrl] = useState('');\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        // Do something with the files\r\n        const file = acceptedFiles[0]\r\n\r\n        // pega a url da imagem\r\n        const fileUrl = URL.createObjectURL(file)\r\n\r\n        setselectedFileUrl(fileUrl)\r\n        onFileUploaded(file)\r\n\r\n    }, [onFileUploaded])\r\n\r\n    const { getRootProps, getInputProps } = useDropzone({\r\n        onDrop,\r\n        accept: 'image/*'\r\n    })\r\n\r\n    return (\r\n        <div className='dropzone' {...getRootProps()}>\r\n            <input {...getInputProps()} accept=\"image/*\" />\r\n            {selectedFileUrl\r\n                ? <img src={selectedFileUrl} alt=\"point thumbnail\" />\r\n                : <p>\r\n                    <FiUpload />\r\n                    Imagem do estabelecimento\r\n                 </p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dropzone\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FiCheckCircle } from 'react-icons/fi';\r\n\r\n\r\nconst SuccessScreen = (props: any) => {\r\n\r\n    return (\r\n        <div id='page-alert-confirm' className={props.confirm}>\r\n            <Link to='/Ecoleta_Web'>\r\n                <FiCheckCircle />\r\n                <h1>Cadastro concluído!</h1>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SuccessScreen;","import React, { useEffect, useState, ChangeEvent, FormEvent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Map, TileLayer, Marker } from 'react-leaflet';\r\nimport { LeafletMouseEvent } from 'leaflet';\r\nimport api from '../../services/api';\r\nimport axios from 'axios';\r\nimport Dropzone from '../../components/Dropzone'\r\n\r\nimport { FiArrowLeft } from 'react-icons/fi';\r\nimport logo from '../../assets/logo.svg';\r\nimport './styles.css';\r\nimport SuccessScreen from '../../components/SucessScreen';\r\n\r\n\r\ninterface Item {\r\n    id: number,\r\n    title: string,\r\n    image_url: string,\r\n    active: boolean\r\n}\r\n\r\ninterface Point {\r\n    id: number\r\n    name: string\r\n    email: string\r\n    whatsapp: string\r\n}\r\n\r\ninterface IBGE_UF_Response {\r\n    id: number\r\n    sigla: string\r\n    nome: string\r\n}\r\ninterface IBGE_City_Response {\r\n    nome: string\r\n}\r\n\r\nconst CreatePoint: React.FC = () => {\r\n\r\n    const [items, setItems] = useState<Item[]>([])\r\n    const [ufs, setUfs] = useState<string[]>([])\r\n    const [cities, setCities] = useState<string[]>([])\r\n    const [inititalMapPosition, setInititalMapPosition] = useState<[number, number]>([0, 0]);\r\n\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        email: '',\r\n        whatsapp: ''\r\n    });\r\n\r\n    const [selectedUf, setSelectedUf] = useState('0')\r\n    const [selectedItems, setSelectedItems] = useState<number[]>([]);\r\n    const [selectedCity, setSelectedCity] = useState('0');\r\n    const [selectedMapPosition, setSelectedMapPosition] = useState<[number, number]>([0, 0]);\r\n    const [selectedFile, setSelectedFile] = useState<File>();\r\n\r\n    const [successScreen, setSuccessScreen] = useState(' ');\r\n\r\n    //  carregando a localização atual do usuário no mapa\r\n    useEffect(() => {        \r\n      \r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            const { latitude, longitude } = position.coords\r\n            setInititalMapPosition([latitude, longitude])\r\n        })\r\n    }, [])\r\n\r\n    // listando todos os items de coleta\r\n    useEffect(() => {\r\n        api.get('items').then(response => {\r\n            setItems(response.data)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        axios.get<IBGE_UF_Response[]>('https://servicodados.ibge.gov.br/api/v1/localidades/estados')\r\n            .then(response => {\r\n                const ufInitials = response.data.map(uf => uf.sigla)\r\n                setUfs(ufInitials)\r\n            })\r\n    }, [])\r\n\r\n    // carregar as cidades sempre que a UF mudar \r\n    useEffect(() => {\r\n        if (selectedUf === '0') {\r\n            return\r\n        }\r\n        axios.get<IBGE_City_Response[]>(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedUf.toLowerCase()}/municipios`)\r\n            .then(response => {\r\n                const cityNames = response.data.map(city => city.nome)\r\n                setCities(cityNames)\r\n            })\r\n    }, [selectedUf])\r\n\r\n\r\n    // carregando a tela da successScreenação de cadastro do ponto,\r\n    // sempre que o ponto for cadastrado.\r\n    useEffect(() => {\r\n\r\n        setSuccessScreen('')\r\n    }, [successScreen])\r\n\r\n\r\n\r\n    function handleInputChange(event: ChangeEvent<HTMLInputElement>) {\r\n        const { name, value } = event.target\r\n        // pega todos os dados que já existiam no formData e insere novos\r\n        // insere o valor baseado no nome do campo(name,email,whatsapp)...\r\n        setFormData({ ...formData, [name]: value })\r\n    }\r\n\r\n    function handleSelectUf(event: ChangeEvent<HTMLSelectElement>) {\r\n        let uf = event.target.value\r\n        setSelectedUf(uf)\r\n    }\r\n\r\n    function handleSelectCity(event: ChangeEvent<HTMLSelectElement>) {\r\n        let city = event.target.value\r\n        setSelectedCity(city)\r\n    }\r\n\r\n    function handleMapClick(event: LeafletMouseEvent) {\r\n        // pegando a latitude e longitude ao clicar no mapa\r\n        setSelectedMapPosition([\r\n            event.latlng.lat,\r\n            event.latlng.lng\r\n        ])\r\n    }\r\n\r\n    function handleSelectItem(id: number) {\r\n\r\n        const alreadySelectedItem = selectedItems.findIndex(item => item === id)\r\n        if (alreadySelectedItem >= 0) {\r\n            const filteredItems = selectedItems.filter(item => item !== id)\r\n            setSelectedItems(filteredItems)\r\n        } else {\r\n            setSelectedItems([...selectedItems, id])\r\n        }\r\n\r\n    }\r\n\r\n    async function handleSubmit(event: FormEvent) {\r\n        // impede o recarregamento da página\r\n        event.preventDefault()\r\n\r\n        const { whatsapp, email, name } = formData\r\n        const uf = selectedUf\r\n        const city = selectedCity\r\n        const [latitude, longitude] = selectedMapPosition\r\n        const items = selectedItems\r\n\r\n        const data = new FormData()\r\n\r\n        data.append('name', name);\r\n        data.append('whatsapp', whatsapp);\r\n        data.append('email', email);\r\n        data.append('uf', uf);\r\n        data.append('city', city);\r\n        data.append('latitude', String(latitude));\r\n        data.append('longitude', String(longitude));\r\n        data.append('items', items.join(','));\r\n\r\n        // envia imagem apenas se o usuário estiver inserido uma imagem.\r\n        if (selectedFile) {\r\n            data.append('image', selectedFile)\r\n        }\r\n\r\n        await api.post('point', data)\r\n\r\n        alert('Ponto de coleta criado!');\r\n\r\n        setSuccessScreen('visible')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"page-create-point\">\r\n                <header>\r\n                    <img src={logo} alt=\"\" />\r\n                    <Link className='home' to='/Ecoleta_Web' >\r\n                        <FiArrowLeft />\r\n                    Voltar para home\r\n                </Link>\r\n                </header>\r\n\r\n                <form onSubmit={e => handleSubmit(e)}>\r\n                    <h1>Cadastro do<br /> ponto de coleta</h1>\r\n\r\n                    <Dropzone onFileUploaded={setSelectedFile} />\r\n\r\n                    <fieldset>\r\n                        <legend>\r\n                            <h2>Dados</h2>\r\n                        </legend>\r\n\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"name\">Nome da Entidade</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id='name'\r\n                                name='name'\r\n                                onChange={e => handleInputChange(e)} />\r\n                        </div>\r\n                        <div className=\"field-group\">\r\n                            <div className=\"field\">\r\n                                <label htmlFor=\"Email\">Email</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id='email'\r\n                                    name='email'\r\n                                    onChange={e => handleInputChange(e)} />\r\n                            </div>\r\n                            <div className=\"field\">\r\n                                <label htmlFor=\"Whatsapp\">Whatsapp</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id='whatsapp'\r\n                                    name='whatsapp'\r\n                                    onChange={e => handleInputChange(e)} />\r\n                            </div>\r\n                        </div>\r\n                    </fieldset>\r\n                    <fieldset>\r\n                        <legend>\r\n                            <h2>Endereço</h2>\r\n                            <span>Selecione o endereço no mapa</span>\r\n                        </legend>\r\n                        {/* Geolocalização */}\r\n                        <Map center={inititalMapPosition} zoom={12} onClick={handleMapClick}>\r\n                            <TileLayer\r\n                                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                            />\r\n                            <Marker position={selectedMapPosition}></Marker>\r\n                        </Map>\r\n                        <div className=\"field-group\">\r\n                            <div className=\"field\">\r\n                                <label htmlFor=\"uf\">Estado(UF)</label>\r\n                                <select\r\n                                    id='uf'\r\n                                    name='uf'\r\n                                    value={selectedUf}\r\n                                    onChange={e => handleSelectUf(e)}   >\r\n\r\n                                    <option value=\"0\">Selecione uma UF: </option>\r\n                                    {ufs.map(uf => (\r\n                                        <option key={uf} value={uf}>{uf}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                            <div className=\"field\">\r\n                                <label htmlFor=\"city\">Cidade</label>\r\n                                <select\r\n                                    id='city'\r\n                                    name='city'\r\n                                    value={selectedCity}\r\n                                    onChange={handleSelectCity} >\r\n\r\n                                    <option value=\"0\">Selecione uma city</option>\r\n                                    {cities.map(city => (\r\n                                        <option key={city} value={city}>{city}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </fieldset>\r\n                    <fieldset >\r\n                        <legend>\r\n                            <h2>Ítems de coleta</h2>\r\n                            <span>Selecione um ou mais ítens abaixo</span>\r\n                        </legend>\r\n                        {/* listagem de items de coleta */}\r\n                        <ul className='items-grid'>\r\n                            {\r\n                                items.map(item => (\r\n                                    <li key={item.id} className={selectedItems.includes(item.id) ? 'selected' : ''} onClick={() => handleSelectItem(item.id)} >\r\n                                        <img src={item.image_url} alt={item.title} />\r\n                                        <span>{item.title}</span>\r\n                                    </li>\r\n                                ))\r\n                            }\r\n                        </ul>\r\n                    </fieldset>\r\n\r\n                    <button type=\"submit\">Cadastrar Ponto de Coleta</button>\r\n                </form>\r\n            </div >\r\n            <SuccessScreen className={successScreen}></SuccessScreen>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreatePoint;","import React from 'react';\r\nimport { Route, BrowserRouter } from 'react-router-dom';\r\n\r\nimport Home from './pages/Home';\r\nimport CreatePoint from './pages/CreatePoint';\r\n\r\nfunction Routes() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Route component={Home} path='/Ecoleta_Web/' exact></Route>\r\n            <Route component={CreatePoint} path='/Ecoleta_Web/create-point'></Route>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Routes","import React from 'react';\nimport Routes from './routes';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}